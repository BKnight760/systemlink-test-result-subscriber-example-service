# -*- coding: utf-8 -*-
"""
Implementation of 'TraceLogger' class
"""
from __future__ import absolute_import

# Import python libs
import logging

# Import local libs
# pylint: disable=import-error,no-name-in-module
from systemlink.messagebus.exceptions import SystemLinkException
from systemlink.messagebus.error import Error
# pylint: enable=import-error,no-name-in-module


class TraceLoggerHandler(logging.Handler):
    """
    Log handler used to direct logging to the Trace Logger service.
    """
    def __init__(self, trace_logger):
        """
        :param trace_logger: A :class:`TraceLogger` instance used for logging.
        :type trace_logger: TraceLogger
        """
        self._trace_logger = trace_logger
        super(TraceLoggerHandler, self).__init__()

    def emit(self, record):
        """
        The polymorphic function called by the Python logging framework
        for custom logging.

        :param record: A dictionary of information pertaining to Python
            logging. Generated by the Python logging framework.
        :type record: dict
        """
        msg = self.format(record)
        self._trace_logger.log_error(msg)


class TraceLogger(object):
    """
    The Trace Logger.

    A class that logs various types of information to the Skyline log files.
    """
    def __init__(self, name, parent, process_logger, log_to_trace_logger=False):
        """
        :param name: The last part of the name to use for this Trace Logger.
            Will not be the full name if ``parent`` is not ``None.
            May be ``None``.
        :type name: str or None
        :param parent: The parent Trace Logger object used to create this one.
            May be ``None``.
        :type parent: TraceLogger
        :param process_logger: The Process Logger associated with this Trace
            Point.
        :type process_logger: systemlink.messagebus.process_logger.ProcessLogger
        :param log_to_trace_logger: ``True`` if this :class:`TraceLogger`
            instance should automatically send Python logging to the Trace
            Logger service. Only one :class:`TraceLogger` instance may do so
            per :class:`systemlink.messagebus.process_logger.ProcessLogger`
            instance. ``False`` otherwise.
        :type log_to_trace_logger: bool
        """
        self._name = ''
        self._process_logger = None
        self._log_handler = None
        self._closing = False

        builder = ''
        if parent:
            builder += parent.name + '.'
        if name:
            builder += name

        self._name = builder
        self._process_logger = process_logger
        self._log_to_trace_logger = log_to_trace_logger
        if self._log_to_trace_logger:
            if self._process_logger.log_to_trace_logger:
                # Only one TraceLogger instance can be set to automatically
                # send Python logging to the TraceLogger service.
                error_info = (
                    'Cannot direct Python logging to TraceLogger more than '
                    'once per ProcessLogger instance'
                )
                raise SystemLinkException.from_name('Skyline.Exception', info=error_info)
            self._setup_log_handler()
            self._process_logger._log_to_trace_logger = True  # pylint: disable=protected-access

    def make_child_logger(self, name):
        """
        Create an instance of :class:`TraceLogger` as a child to this
        instance.

        :param name: The name of the child instance.
        :type name: str
        :return: A new instance of :class:`TraceLogger`.
        :rtype: TraceLogger
        """
        return self.__class__(name, self, self._process_logger)

    def __del__(self):
        self.close()

    def close(self):
        """
        Close this instance of :class:`TraceLogger`.
        """
        if self._closing:
            return
        self._closing = True
        if self._log_to_trace_logger:
            # Get the root logger.
            log = logging.getLogger()
            log.removeHandler(self._log_handler)
            self._log_handler = None
            self._process_logger._log_to_trace_logger = False  # pylint: disable=protected-access

    def _setup_log_handler(self):
        """
        Set up and register the Python log handler so that Python logging
        will automatically be sent to Trace Logger.
        """
        # Get the root logger.
        log = logging.getLogger()

        # Create Trace Logger handler and set level to error
        handler = TraceLoggerHandler(self)
        handler.setLevel(logging.ERROR)

        # Create formatter. TraceLogger will take care of the timestamp and
        # the level name isn't important because we are logging only errors or
        # higher. So just include the namespace of the Python file
        # (eg "systemlink.messagebus.trace_logger") and the message. This file
        # namespace is useful since any Python dependency used may also log
        # errors. The TraceLogger namespace name will also be added by the
        # handler in a later step.
        formatter = logging.Formatter('%(name)s - %(message)s')

        # Add formatter to stream_handler
        handler.setFormatter(formatter)

        # Add handler to logger
        log.addHandler(handler)
        self._log_handler = handler

    @property
    def name(self):
        """
        Get the full name of this :class:`TraceLogger` object.

        :return: The full name of this :class:`TraceLogger` object.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Set the full name of this :class:`TraceLogger` object.

        :param name: The full name of this :class:`TraceLogger` object.
        :type name: str
        """
        self._name = name

    def make_trace_point(self, name):
        """
        Create a Trace Point.

        :param name: Name of the Trace Point.
        :type name: str
        :return: The associated Trace Point.
        :rtype: systemlink.messagebus.trace_point.TracePoint
        """
        builder = self._name + '.' + name
        return self._process_logger.make_or_lookup_trace_point(builder)

    def log(self, log_string, trace_point=None):
        """
        Log to the Trace Logger via a Trace Point.

        :param log_string: String to log.
        :type log_string: str
        :param trace_point: Trace point to use or ``None`` to not use a
            trace point.
        :type trace_point: systemlink.messagebus.trace_point.TracePoint
        """
        if trace_point is None:
            self.log_error('Null tracepoint: ' + log_string)
        if trace_point.is_enabled:
            self._process_logger.log(self._name, log_string, trace_point=trace_point)

    def log_info(self, log_string):
        """
        Log an informative message to the Trace Logger.

        :param log_string: String to log.
        :type log_string: str
        """
        self._process_logger.log_info(self._name, log_string)

    def log_error(self, error, skip_if_has_log_handler=False):
        """
        Log an error to the Trace Logger.

        :param error: The error may be a :class:`str`, a
            :class:`systemlink.messagebus.error.Error` object, or or a list of
            :class:`systemlink.messagebus.error.Error` objects.
        :type error: str or systemlink.messagebus.error.Error or
            list(systemlink.messagebus.error.Error)
        :param skip_if_has_log_handler: When ``True``, don't log if there is
            already a log handler installed by any TraceLogger instance.
        :type skip_if_has_log_handler: bool
        """
        if skip_if_has_log_handler and self.any_has_log_handler:
            return
        if isinstance(error, str):
            self._process_logger.log_error(self._name, error)
        elif isinstance(error, Error):
            self._process_logger.log_error(self._name, str(error))
        elif isinstance(error, list):
            for error_item in error:
                self._process_logger.log_error(
                    self._name, str(error_item)
                )

    def perform_assert(self, assertion, log_string):
        """
        Test an assertion and log an error to the Trace Logger if it fails.

        :param assertion: Expression to evaluate as an assertion.
        :type assertion: bool
        :param log_string: Error message to log if the assertion fails.
        :type log_string: str
        """
        if not assertion:
            self._process_logger.log_error(self._name, log_string)

    @property
    def has_log_handler(self):
        """
        Get whether this TraceLogger instance is automatically sending
        Python logging to the Trace Logger service.

        :return: ``True`` if Python logging is automatically sent to
            Trace Logger. ``False`` otherwise.
        :rtype: bool
        """
        return self._log_to_trace_logger


    @property
    def any_has_log_handler(self):
        """
        Get whether any TraceLogger instance is automatically sending
        Python logging to the Trace Logger service.

        :return: ``True`` if Python logging is automatically sent to
            Trace Logger. ``False`` otherwise.
        :rtype: bool
        """
        return self._process_logger.log_to_trace_logger
